exit
@interactor.errors
exit
@interactor.errors
@interactor
exit
@interactor.errors
@interactor
exit
@interactor.errors[0]
@interactor.errors[0][0]
@interactor.errors[0][:title]
@interactor.errors[0]
@interactor.errors
exit
@interactor.errors[0]
@interactor.errors[0].message
@interactor.errors[0].messages
@interactor.errors[0]
@interactor.errors
exit
exception.record.errors.messages
exception.record.errors.first
exception.record.errors.second
exception.record.errors.first
exception.record.errors.each do |e|
exception.record.errors.to_s
exception.record.errors[0]
exception.record.errors
exception.record
exception.errors
exception
exit
@interactor.errors
exit
@interactor.errors
exit
@interactor
@interactor.errors
exit
@interactor
@errors
@errros
@interactor.@errros
@interactor
@interactor.errors
@interactor
exit
context
exit
self.params.merge(user_id: current_user.id)
self.params
self
exit
tags
exit
problem_tags_params
tags
exit
render :status => 404
@category
help_center_catego
help_center_categories
exit
lookup_context.view_paths("/help_center")
lookup_context.view_paths("help_center")
lookup_context.view_paths("help_center/general")
lookup_context.any_templates?("help_center/help.html.erb")
lookup_context.any_templates?("help_center")
lookup_context.any_templates?("help_center/")
lookup_context.any_templates?("help_center/general")
lookup_context.find_all("help_center/partials")
lookup_context.find_all("help_center/general/.")
lookup_context.find_all("help_center/general")
lookup_context.find_all("help_center/help.html.erb")
lookup_context.find_all("help_center/help.html.er")
lookup_context.find("help_center/help.html.er")
lookup_context.find("help_center/help.html.erb")
template_exists?("general/", "help_center")
template_exists?("general/.", "help_center")
template_exists?("general", "help_center")
template_exists?("/general", "help_center")
template_exists?("help.html.erb", "help_center")
template_exists?("/help_center", "help_center")
template_exists?("/help_center", "layouts")
template_exists?("help_center", "layouts")
exit
File.directory?("/.")
File.directory?("/app")
File.directory?("/routes")
File.directory?("/help")
File.directory?("/help_center")
File.directory?("/views")
File.directory?("/assets")
File.directory?("/public")
File.directory?("/")
File.directory?("assets")
File.directory?("controllers")
File.directory?("/help_center")
File.directory?("help_center")
lookup_context.exists?("help_center/")
lookup_context.exists?("help_center/help.html.erb")
lookup_context.exists?("help_center/general")
exit
@category
exit
comment.comments
comment.comments.count
exit
comment.comments.active.count
comment.comments.active
comment.comments
comment
exit
preview_image.image_data.url
preview_image
exit
problems.first.cached_votes_score
problems.first
problems.where(cached_votes_score: 5)
problems
Problem.maximum('cached_votes_score')
exit
Problem.select('MAX(cached_votes_score)')
problems.where(cahced_votes_score: Problem.select('MAX(cached_votes_score)'))
problems.where(cahced_votes_score: Problem.select('MAX(cached_votes_score)')).first
problems.count
problems
@@featured
exit
Problem.trending_problem
@@featured
exit
report.reportable_type
report.reportable
report
exit
report.reportable.problem.id
report.reportable.problem
report.reportable
exit
problem.flag_reports
@spam_and_offensive_flags.sample(rand(1..2))
problem.reports.count
problem.reports
problem
@spam_and_offensive_flags
@flag_and_offensive_flags
problem.flags
problem.spam_or_offensive?
exit
problem.spam_or_offensive?
problem
@spam_and_offensive_flags
@spam_or_offensive_flags
exit
@spam_and_offensive_flags
@spam_and_offensive_flags.sample(rand(1..2))
exit
FlagReport.all
ReportFlag.all
problem.spam_or_offensive_reports
problem.spam_or_offensive_reports.count
problem.reports.count
problem.reports
problem.spam_or_offensive?
exit
FlagReport.all.count
FlagReport.all
problem.spam_or_offensive_reports.uniq.count
problem.spam_or_offensive_reports.uniq
problem.spam_or_offensive_reports.unq
problem.reports.count
problem.spam_or_offensive_reports.count
problem.spam_or_offensive_reports
problem.flags
problem.reports
problem.reports.count
problem.reports
problem.spam_or_offensive?
problem.old_and_poor?
problem.dead?
exit
problem.reports.count
problem.spam_or_offensive?
problem.dead?
problem.old_and_poor?
@problem.old_and_poor?
exit
problem.spam_or_offensive?
problem.dead?
problem.old_and_poor?
exit
problem.old_and_poor?
problem.reports
exit
problem.reports
report.flags
report.flag
report.reportable
Report.all
problem.reports
problem.reports.count
problem.reports/count
problem.reports
Report.all
report
exit
Report.all
Report.akk
@problem.reports
exit
Report.all
@problem.flags
@problem.reports
@problem.old_and_poor?
exit
@problem.created_at < 60.days.ago
@problem.created_at
exit
exit]
activity
exit
Problem.count
problem
exit
params[:resource].class
params[:resource].class.name
params[:resource].versions
params[:resource]
params[:resource=
@resource
exit
problem.versions.count
problem.versions
problem_version_1
exit
@resource
@resource.versions
exit
params[:notification_type]
params
exit
@notification_type
exit
Reputation::UpdateReputation.new(action: action_taken, actor: @user, acted_on: @post).call
@action_taken
send(action_taken)
@action_taken
exit
activity.errors.full_messages
activity.valid?
exit
version.errors.full_messages
version.valid?
exit
