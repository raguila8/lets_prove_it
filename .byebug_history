exit
@voted_type
@voted
exit
Problem.find(17)
self
self.topic
self.problem
self.user
self..user
self
exit
feed.first.class.name
feed.first.class
feed.count
feed
exit
feed[0]
feed.count
feed
exit
current_user.liked? model
current_user.voted_down_on? model
current_user.voted_down_on? mode
model.class.name
exit
@comment.proof.comments.map { |comment| comment.user 
@comment.proof.comments.map { |comment| comment}
@comment.proof.comments.first.user
@comment.proof.comments.first 
@comment.proof.comments.count
@comment.proof.comments
exit
@comment.proof.comments.map { |comment| comment.user } - [current_user]
@comment.proof.comments.map { |comment| comment.user }
@comment.proof.comments
@comment.proof
@comment
exit
@receipt
@receipt.message
@receipt.errors.any?
@receipt.errors
exit
images_array
exit
@new_images
images_array
exit
images
iamges
images.length
image.length
exit
problem_images_params
params
@new_images
exit
eit
exi
images
exit
model == "problem"
model
exit
flash[:failed_problem_create]
flash
exit
topic.id
topic
exit
self.id
self
exit
exception
exit
@problem.errors
@problem.valid?
@problem
exit
@problem.errors
@problem.valid?
@problem
exit
problem_tags_params["tags"].to_str
problem_tags_params["tags"]
problem_tags_params
exit
action_name
controller_name
