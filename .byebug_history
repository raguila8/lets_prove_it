exit
problem.flag_reports
@spam_and_offensive_flags.sample(rand(1..2))
problem.reports.count
problem.reports
problem
@spam_and_offensive_flags
@flag_and_offensive_flags
problem.flags
problem.spam_or_offensive?
exit
problem.spam_or_offensive?
problem
@spam_and_offensive_flags
@spam_or_offensive_flags
exit
@spam_and_offensive_flags
@spam_and_offensive_flags.sample(rand(1..2))
exit
FlagReport.all
ReportFlag.all
problem.spam_or_offensive_reports
problem.spam_or_offensive_reports.count
problem.reports.count
problem.reports
problem.spam_or_offensive?
exit
FlagReport.all.count
FlagReport.all
problem.spam_or_offensive_reports.uniq.count
problem.spam_or_offensive_reports.uniq
problem.spam_or_offensive_reports.unq
problem.reports.count
problem.spam_or_offensive_reports.count
problem.spam_or_offensive_reports
problem.flags
problem.reports
problem.reports.count
problem.reports
problem.spam_or_offensive?
problem.old_and_poor?
problem.dead?
exit
problem.reports.count
problem.spam_or_offensive?
problem.dead?
problem.old_and_poor?
@problem.old_and_poor?
exit
problem.spam_or_offensive?
problem.dead?
problem.old_and_poor?
exit
problem.old_and_poor?
problem.reports
exit
problem.reports
report.flags
report.flag
report.reportable
Report.all
problem.reports
problem.reports.count
problem.reports/count
problem.reports
Report.all
report
exit
Report.all
Report.akk
@problem.reports
exit
Report.all
@problem.flags
@problem.reports
@problem.old_and_poor?
exit
@problem.created_at < 60.days.ago
@problem.created_at
exit
exit]
activity
exit
Problem.count
problem
exit
params[:resource].class
params[:resource].class.name
params[:resource].versions
params[:resource]
params[:resource=
@resource
exit
problem.versions.count
problem.versions
problem_version_1
exit
@resource
@resource.versions
exit
params[:notification_type]
params
exit
@notification_type
exit
Reputation::UpdateReputation.new(action: action_taken, actor: @user, acted_on: @post).call
@action_taken
send(action_taken)
@action_taken
exit
activity.errors.full_messages
activity.valid?
exit
version.errors.full_messages
version.valid?
exit
proof_comment.errors.full_messages
proof_comment.errors
proof_comment.valid?
proof_comment.commented_on_type
proof_comment
exit
problem.valid?
exit
problem.errors.first
problem.errors
problem.valid?
exit
names
Flag.where(name: names)
Flag.wehre(name: names)
exit
current_user.name
current_user
exit
@notifications
exit
@report.errors.messages
@report.errors
@report.valid?
@report.assign_attributes(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")@report.valid?
@report.assign_attributes(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")
@report.update_attributes(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")
@report.update(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")
@report
exit
report.flag_reports
report.flag_report
report.flag_reports
report
report.
report.flags
report
exit
flags.first.class
flags.first.instance_of? Flag
flags.first
flags.uniq
flags
exit
report_params
flag_params
params
exit
flags
exit
params
exit
params
exit
flags.count
flags
names
exit
reportable.class.name
reportable
names
flags.count
flags
exit
names
flags
exit
params["flag"]
params[:flag]
params
params[flag
params
parama
exit
self
slef
exit
@followers.count
@followers
exit
activity.user
activity.nil?
activity
exit
activity.user
comment.user
activity
comment
exit
activity.nil?
activity.acted_on.class.name
activity.acted_on
activity
exit
@model.class.name.downcase
@model
@action_taken
exit
@model
exit
options[:search_filter]
exit
params
exit
Topic.where("name LIKE ?", options[:search_filter])
options[:search_filter]
exit
params
exit
options[:sorter]
exit
options[:search_filter].blank?
options[:search_filter]
exit
Topic.all.order("#{options[:sorter]} DESC")
options[:sorter]
exit
self.topics
self.topic
self.topics
self
exit
@problems.count
@problems = Problem.feed({user: current_user, filter: params[:filter], sorter: params[:sorter]})
Problem.feed({user: current_user, filter: params[:filter], sorter: params[:sorter]})
exit
current_user.unfollow @user
current_user
@user
exit
current_user.topics_following.destroy(@topic)
@topic.nil?
@topic
exit
current_user.unfollow @topic
current_user.topics_following.destroy(@topic)
@topic
exit
current_user.topics_following.destroy(@topic)
@topic = current_user.topics_following.first
