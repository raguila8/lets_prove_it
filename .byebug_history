exit
Problem.count
problem
exit
params[:resource].class
params[:resource].class.name
params[:resource].versions
params[:resource]
params[:resource=
@resource
exit
problem.versions.count
problem.versions
problem_version_1
exit
@resource
@resource.versions
exit
params[:notification_type]
params
exit
@notification_type
exit
Reputation::UpdateReputation.new(action: action_taken, actor: @user, acted_on: @post).call
@action_taken
send(action_taken)
@action_taken
exit
activity.errors.full_messages
activity.valid?
exit
version.errors.full_messages
version.valid?
exit
proof_comment.errors.full_messages
proof_comment.errors
proof_comment.valid?
proof_comment.commented_on_type
proof_comment
exit
problem.valid?
exit
problem.errors.first
problem.errors
problem.valid?
exit
names
Flag.where(name: names)
Flag.wehre(name: names)
exit
current_user.name
current_user
exit
@notifications
exit
@report.errors.messages
@report.errors
@report.valid?
@report.assign_attributes(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")@report.valid?
@report.assign_attributes(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")
@report.update_attributes(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")
@report.update(status: "closed", expired_on: Time.now, details: "Report was closed by the reporter.")
@report
exit
report.flag_reports
report.flag_report
report.flag_reports
report
report.
report.flags
report
exit
flags.first.class
flags.first.instance_of? Flag
flags.first
flags.uniq
flags
exit
report_params
flag_params
params
exit
flags
exit
params
exit
params
exit
flags.count
flags
names
exit
reportable.class.name
reportable
names
flags.count
flags
exit
names
flags
exit
params["flag"]
params[:flag]
params
params[flag
params
parama
exit
self
slef
exit
@followers.count
@followers
exit
activity.user
activity.nil?
activity
exit
activity.user
comment.user
activity
comment
exit
activity.nil?
activity.acted_on.class.name
activity.acted_on
activity
exit
@model.class.name.downcase
@model
@action_taken
exit
@model
exit
options[:search_filter]
exit
params
exit
Topic.where("name LIKE ?", options[:search_filter])
options[:search_filter]
exit
params
exit
options[:sorter]
exit
options[:search_filter].blank?
options[:search_filter]
exit
Topic.all.order("#{options[:sorter]} DESC")
options[:sorter]
exit
self.topics
self.topic
self.topics
self
exit
@problems.count
@problems = Problem.feed({user: current_user, filter: params[:filter], sorter: params[:sorter]})
Problem.feed({user: current_user, filter: params[:filter], sorter: params[:sorter]})
exit
current_user.unfollow @user
current_user
@user
exit
current_user.topics_following.destroy(@topic)
@topic.nil?
@topic
exit
current_user.unfollow @topic
current_user.topics_following.destroy(@topic)
@topic
exit
current_user.topics_following.destroy(@topic)
@topic = current_user.topics_following.first
current_user.topics_following.destroy(@topic)
@topic = current_user.topics_following.last
@topic = current_user.topics_following.first
@topic = current_user.topics_following.last
@topic = Topic.last
@topic
current_user.topics_following.destroy(@topic)
current_user.topics_following
@topic.nil?
@topic
exit
current_user.unfollow @topic
current_user
@topic
exit
options[:filter]
options[:user]
options[:sorter]
options
exit
options
option
exit
users
exit
users
exit
@voted_type
@voted
exit
Problem.find(17)
self
self.topic
self.problem
self.user
self..user
self
exit
feed.first.class.name
feed.first.class
feed.count
feed
exit
feed[0]
feed.count
feed
exit
current_user.liked? model
current_user.voted_down_on? model
current_user.voted_down_on? mode
model.class.name
exit
@comment.proof.comments.map { |comment| comment.user 
@comment.proof.comments.map { |comment| comment}
@comment.proof.comments.first.user
@comment.proof.comments.first 
@comment.proof.comments.count
@comment.proof.comments
exit
@comment.proof.comments.map { |comment| comment.user } - [current_user]
@comment.proof.comments.map { |comment| comment.user }
@comment.proof.comments
@comment.proof
@comment
exit
@receipt
@receipt.message
@receipt.errors.any?
@receipt.errors
exit
images_array
exit
@new_images
images_array
exit
images
iamges
images.length
image.length
exit
problem_images_params
params
